# -*- coding: cp1251 -*-
import keras
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense, Dropout
import time

start_time = time.time()

(x_train, y_train), (x_test, y_test) = mnist.load_data()

x_train = x_train.reshape(60000, 784)
x_test = x_test.reshape(10000, 784)

x_train = x_train.astype('float32')  # из uint8
x_test = x_test.astype('float32')

x_train /= 255  # нормализаци€ пикселей
x_test /= 255

num_classes = 10

y_train = keras.utils.to_categorical(y_train, num_classes)  # метки -> бинарные векторы
y_test = keras.utils.to_categorical(y_test, num_classes)

model = Sequential()

model.add(Dense(512, activation='relu', input_shape=(784,)))
model.add(Dropout(0.2))

model.add(Dense(512, activation='relu'))
model.add(Dropout(0.2))

model.add(Dense(num_classes, activation='softmax'))  # вектор значений -> веро€тностное распределение

model.compile(loss='categorical_crossentropy',  # »спользуетс€ дл€ задачи многоклассовой классификации, где каждый пример принадлежит к одному из нескольких классов. Ёта функци€ минимизирует кросс-энтропию между предсказанными веро€тност€ми и фактическими классами.
              optimizer='adam',                 # опр-т обновление весовых коэфф-ов модели в процессе обучени€
              metrics=['accuracy'])             # исп-с€ дл€ оценки производительности модели

# обучение
history = model.fit(x_train, y_train,
                    batch_size=128,
                    epochs=15,
                    verbose=1,  # вывод информации о потер€х, метриках и прогресс-бар
                    validation_data=(x_test, y_test))  # тестовые данные, будут использоватьс€ дл€ проверки производительности модели во врем€ обучени€

model.save("multilayer_perceptron.keras")

print('==============================================================')

# оценка потерь и точности модели
score = model.evaluate(x_test, y_test, verbose=0)
print('ѕотери на тестовых данных:', score[0])
print('“очность модели на тестовых данных:', score[1])

# подсчЄт процента корректной работы на тестовой базе
accuracy = score[1]
percent_correct = accuracy * 100
print('ѕроцент корректной работы:', percent_correct)

end_time = time.time()

print('«атраченное врем€:', end_time - start_time)